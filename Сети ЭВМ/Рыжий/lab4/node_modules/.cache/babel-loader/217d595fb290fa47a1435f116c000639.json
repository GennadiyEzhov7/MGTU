{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-6266d06e\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"startValues\"\n};\nconst _hoisted_2 = {\n  class: \"title\"\n};\nconst _hoisted_3 = [\"value\", \"onInput\"];\nconst _hoisted_4 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.inputs, (item, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"value\",\n      key: index\n    }, [_createElementVNode(\"div\", _hoisted_2, _toDisplayString(item.title), 1\n    /* TEXT */\n    ), $props.gameState === 'set' ? (_openBlock(), _createElementBlock(\"input\", {\n      key: 0,\n      value: item.value,\n      onInput: $event => {\n        $options.onInput($event);\n        $props.setInputs(index, $event.target.value);\n      }\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_3)) : _createCommentVNode(\"v-if\", true), $props.gameState === 'game' || $props.gameState === 'restart' ? (_openBlock(), _createElementBlock(\"input\", {\n      key: 1,\n      style: {\n        \"opacity\": \"0.2\"\n      },\n      readonly: \"\",\n      type: \"number\",\n      value: item.value\n    }, null, 8\n    /* PROPS */\n    , _hoisted_4)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <div v-if=\\\"(index !== inputs.length - 1)\\\" class=\\\"divider\\\"/> \")]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;;;;AACOA,OAAK,EAAC;;;AAEFA,OAAK,EAAC;;;;;uBAFfC,oBAOM,KAPN,cAOM,oBANJA,oBAKMC,SALN,EAKM,IALN,EAKMC,YALqCC,aAKrC,EAL2C,CAAtBC,IAAsB,EAAhBC,KAAgB,KAAX;yBAAtCL,oBAKM,KALN,EAKM;AALDD,WAAK,EAAC,OAKL;AAL8CO,SAAG,EAAED;AAKnD,KALN,GACEE,oBAAyC,KAAzC,cAAyCC,iBAAnBJ,IAAI,CAACK,KAAc,CAAzC,EAAgC;AAAA;AAAhC,OACcN,qBAAS,uBAAvBH,oBAAwH,OAAxH,EAAwH;YAAA;AAAnFU,WAAK,EAAEN,IAAI,CAACM,KAAuE;AAA/DC,aAAK;AAAEC,yBAAQC,MAAR;AAAiBV,yBAAUE,KAAV,EAAiBQ,MAAM,CAACC,MAAP,CAAcJ,KAA/B;AAAoC;AAAG,KAAxH;;AAAA,wDACcP,qBAAS,UAAiBA,qBAAS,2BAAjDH,oBAAkI,OAAlI,EAAkI;YAAA;AAAhEe,WAAoB,EAApB;AAAA;AAAA,OAAgE;AAA3CC,cAAQ,EAAR,EAA2C;AAAlCC,UAAI,EAAC,QAA6B;AAAnBP,WAAK,EAAEN,IAAI,CAACM;AAAO,KAAlI;;AAAA,wDACAQ,yFAJF;GAKM,CALN;;AAAA,GAMI,EAPN","names":["class","_createElementBlock","_Fragment","_renderList","$props","item","index","key","_createElementVNode","_toDisplayString","title","value","onInput","$options","$event","target","style","readonly","type","_createCommentVNode"],"sourceRoot":"","sources":["C:\\Users\\mvarlamov\\Desktop\\web\\lab4\\src\\components\\InputMenu.vue"],"sourcesContent":["<template>\r\n  <div class=\"startValues\">\r\n    <div class=\"value\" v-for=\"(item, index) in inputs\" :key=\"index\">\r\n      <div class=\"title\">{{ item.title }}</div>\r\n      <input v-if=\"(gameState === 'set')\" :value=\"item.value\" @input=\"onInput($event); setInputs(index, $event.target.value)\">\r\n      <input v-if=\"(gameState === 'game') || (gameState === 'restart')\" style=\"opacity: 0.2\" readonly type=\"number\" :value=\"item.value\">\r\n      <!-- <div v-if=\"(index !== inputs.length - 1)\" class=\"divider\"/> -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  // eslint-disable-next-line vue/multi-word-component-names\r\n  name: 'InputMenu',\r\n  props: ['inputs', 'setInputs', 'gameState'],\r\n  methods:{\r\n    onInput(event) {\r\n      event.target.value = event.target.value.replace(/[^0-9.]/g, '')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n  input {\r\n    min-width: 200px;\r\n    font-size: 14px\r\n  }\r\n  .startValues {\r\n    margin-left: 10px;\r\n    padding: 10px 10px;\r\n    border: 2px solid #c9c9c9;\r\n    background-color: rgba(255, 255, 255, 0.1);\r\n  }\r\n  .value {\r\n    padding-top: 5px;\r\n  }\r\n  .divider {\r\n    border-bottom: 1px dashed #c9c9c9;\r\n    margin-top: 5px;\r\n  }\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}